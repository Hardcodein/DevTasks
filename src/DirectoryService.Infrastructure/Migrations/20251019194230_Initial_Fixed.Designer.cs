// <auto-generated />
using System;
using DirectoryService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevTasks.Infrastructure.Migrations
{
    [DbContext(typeof(DirectoryServiceDbContext))]
    [Migration("20251019194230_Initial_Fixed")]
    partial class Initial_Fixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevTasks.Domain.Department.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("fk_parent_departments")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("fk_parent_departments");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("DevTasks.Domain.Department.Relations.DepartmentLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.HasKey("Id")
                        .HasName("pk_departments_locations");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("departments_locations", (string)null);
                });

            modelBuilder.Entity("DevTasks.Domain.Department.Relations.DepartmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.HasKey("Id")
                        .HasName("pk_departments_positions");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("departments_positions", (string)null);
                });

            modelBuilder.Entity("DevTasks.Domain.Location.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("DevTasks.Domain.Position.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("DevTasks.Domain.Department.Department", b =>
                {
                    b.HasOne("DevTasks.Domain.Department.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("fk_parent_departments")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("DevTasks.Domain.Department.VO.DepartmentIdentifier", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("identifier");

                            b1.HasKey("DepartmentId");

                            b1.ToTable("departments");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.OwnsOne("DevTasks.Domain.Department.VO.DepartmentName", "Name", b1 =>
                        {
                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("DepartmentId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("departments");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.OwnsOne("DevTasks.Domain.Department.VO.DepartmentPath", "Path", b1 =>
                        {
                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path");

                            b1.HasKey("DepartmentId");

                            b1.ToTable("departments");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.Navigation("Identifier")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Path")
                        .IsRequired();
                });

            modelBuilder.Entity("DevTasks.Domain.Department.Relations.DepartmentLocation", b =>
                {
                    b.HasOne("DevTasks.Domain.Department.Department", null)
                        .WithMany("Locations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevTasks.Domain.Location.Location", null)
                        .WithMany("Departments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevTasks.Domain.Department.Relations.DepartmentPosition", b =>
                {
                    b.HasOne("DevTasks.Domain.Department.Department", null)
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevTasks.Domain.Position.Position", null)
                        .WithMany("Departments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevTasks.Domain.Location.Location", b =>
                {
                    b.OwnsOne("DevTasks.Domain.Location.VO.LocationAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.ToJson("address");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("DevTasks.Domain.Location.VO.LocationName", "Name", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("LocationId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("DevTasks.Domain.Location.VO.LocationTimeZone", "Timezone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Ianacode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Timezone");
                });

            modelBuilder.Entity("DevTasks.Domain.Position.Position", b =>
                {
                    b.OwnsOne("DevTasks.Domain.Position.VO.PositionDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.OwnsOne("DevTasks.Domain.Position.VO.PositionName", "Name", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("PositionId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("DevTasks.Domain.Department.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Locations");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("DevTasks.Domain.Location.Location", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("DevTasks.Domain.Position.Position", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
